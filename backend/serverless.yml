service: serverless-todo-app

plugins:
  - serverless-webpack
  - serverless-aws-documentation
  - serverless-reqvalidator-plugin
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  environment:
    PURCHASE_TABLE: purchase-${self:provider.stage}
    PURCHASE_ID_INDEX: PurchaseIdIndex
    IMAGES_S3_BUCKET: serverless-purchase-images-jhyt56-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
  apiGateway:
    shouldStartNameWithService: true 

custom:
  documentation:
    api:
      info:
        version: "v1.0.0"
        title: "Todo API"
        description: "Severless application for todo app"
    models:
      - name: "CreatePurchaseRequest"
        contentType: application/json
        schema: ${file(models/create-purchase-model.json)}

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetPurchase:
    handler: src/lambda/http/getPurchases.handler
    events:
      - http:
          method: get
          path: purchases
          cors: true
          authorizer: Auth
    iamRoleStatementsName: Query-DynamoDB-purchase-Table
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PURCHASE_TABLE}

  CreatePurchase:
    handler: src/lambda/http/createPurchase.handler
    events:
      - http:
          method: post
          path: purchases
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new purchase
            description: Create a new purchase
            requestModels:
              'application/json': "CreatePurchaseRequest"
    iamRoleStatementsName: Put-Into-DynamoDB-Purchase-Table
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PURCHASE_TABLE}


  DeletePurchase:
    handler: src/lambda/http/deletePurchase.handler
    events:
      - http:
          method: delete
          path: purchases/{purchaseId}
          cors: true
          authorizer: Auth
          documentation:
            summary: Delete a Purchase
            description: Delete a Purchase
    iamRoleStatementsName: Delete-from-DynamoDB-Purchase-Table
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PURCHASE_TABLE}


  
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: purchases/{purchaseId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatementsName: Get-Put-S3-Images-Bucket-And-Update-Purchase-Table
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PURCHASE_TABLE}
    

resources:
  Resources:
    
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    PurchasesDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: datePurchased
            AttributeType: S
          - AttributeName: purchaseId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: purchaseId
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.PURCHASE_ID_INDEX}
            KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: datePurchased
              KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.PURCHASE_TABLE}

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyImagesPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket

    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi        